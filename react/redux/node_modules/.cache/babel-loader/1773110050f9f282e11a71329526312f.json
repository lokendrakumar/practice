{"ast":null,"code":"// import { redux } from 'react-redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // const countReducer = (state = initialState, action) => {\n//     if(action.type == 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return  state\n// }\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","counterActions","actions"],"sources":["/Users/lokendra/react/redux/src/store/index.js"],"sourcesContent":["// import { redux } from 'react-redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter : true};\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialState,\n    reducers: {\n        increment(state){\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        increase(state, action){\n            state.counter = state.counter + action.amount\n        },\n        toggle(state){\n            state.showCounter = !state.showCounter\n        }\n    }\n})\n\n\n// const countReducer = (state = initialState, action) => {\n//     if(action.type == 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return  state\n// }\nconst initialAuthState = {isAuthenticated : false}\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state){\n            state.isAuthenticated = true\n        },\n        logout(state){\n            state.isAuthenticated = false\n        },\n\n    }\n})\nconst store = configureStore({\n    reducer: counterSlice.reducer\n})\nexport const counterActions = counterSlice.actions \nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAG;AAA5B,CAArB;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SADuB;EAE7BJ,YAAY,EAAEA,YAFe;EAG7BK,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAD,EAAO;MACZA,KAAK,CAACN,OAAN;IACH,CAHK;;IAINO,SAAS,CAACD,KAAD,EAAO;MACZA,KAAK,CAACN,OAAN;IACH,CANK;;IAONQ,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAe;MACnBH,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;IACH,CATK;;IAUNC,MAAM,CAACL,KAAD,EAAO;MACTA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;IACH;;EAZK;AAHmB,CAAD,CAAhC,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMW,gBAAgB,GAAG;EAACC,eAAe,EAAG;AAAnB,CAAzB;AACA,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BM,IAAI,EAAE,gBADoB;EAE1BJ,YAAY,EAAEa,gBAFY;EAG1BR,QAAQ,EAAE;IACNW,KAAK,CAACT,KAAD,EAAO;MACRA,KAAK,CAACO,eAAN,GAAwB,IAAxB;IACH,CAHK;;IAING,MAAM,CAACV,KAAD,EAAO;MACTA,KAAK,CAACO,eAAN,GAAwB,KAAxB;IACH;;EANK;AAHgB,CAAD,CAA7B;AAaA,MAAMI,KAAK,GAAGnB,cAAc,CAAC;EACzBoB,OAAO,EAAEhB,YAAY,CAACgB;AADG,CAAD,CAA5B;AAGA,OAAO,MAAMC,cAAc,GAAGjB,YAAY,CAACkB,OAApC;AACP,eAAeH,KAAf"},"metadata":{},"sourceType":"module"}