{"ast":null,"code":"// import { redux } from 'react-redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit'; // const countReducer = (state = initialState, action) => {\n//     if(action.type == 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return  state\n// }\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","counterSlice","auth","counterActions","actions","authActions"],"sources":["/Users/lokendra/react/redux/src/store/index.js"],"sourcesContent":["// import { redux } from 'react-redux'\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n\n\n// const countReducer = (state = initialState, action) => {\n//     if(action.type == 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type == 'toggle') {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n//     return  state\n// }\nconst initialAuthState = {isAuthenticated : false}\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state){\n            state.isAuthenticated = true\n        },\n        logout(state){\n            state.isAuthenticated = false\n        },\n\n    }\n})\nconst store = configureStore({\n    reducer: {counter: counterSlice.reducer,auth: authSlice.reducer}\n})\nexport const counterActions = counterSlice.actions \nexport const authActions = authSlice.actions \nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG;EAACC,eAAe,EAAG;AAAnB,CAAzB;AACA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC1BK,IAAI,EAAE,gBADoB;EAE1BC,YAAY,EAAEJ,gBAFY;EAG1BK,QAAQ,EAAE;IACNC,KAAK,CAACC,KAAD,EAAO;MACRA,KAAK,CAACN,eAAN,GAAwB,IAAxB;IACH,CAHK;;IAINO,MAAM,CAACD,KAAD,EAAO;MACTA,KAAK,CAACN,eAAN,GAAwB,KAAxB;IACH;;EANK;AAHgB,CAAD,CAA7B;AAaA,MAAMQ,KAAK,GAAGV,cAAc,CAAC;EACzBW,OAAO,EAAE;IAACC,OAAO,EAAEC,YAAY,CAACF,OAAvB;IAA+BG,IAAI,EAAEX,SAAS,CAACQ;EAA/C;AADgB,CAAD,CAA5B;AAGA,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGd,SAAS,CAACa,OAA9B;AACP,eAAeN,KAAf"},"metadata":{},"sourceType":"module"}